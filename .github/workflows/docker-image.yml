name: Deploy to Google Cloud Run

on:
  push:
    branches:
      - main  # Dispara o pipeline quando houver push na branch main
  workflow_dispatch:  # Permite acionar o pipeline manualmente

env:
  GCP_PROJECT: 'projeto-treinamento-450619'  # ID fixo do projeto
  REGION: 'us-central1'                      # Região onde o serviço será implantado
  SERVICE_NAME: 'cripto-app'                 # Nome do serviço no Cloud Run
  MEMORY: '2Gi'                              # Memória alocada para o serviço
  GOOGLE_APPLICATION_CREDENTIALS: 'gcloud-key.json'  # Caminho para o arquivo de credenciais

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: gcp_autenticador  # Define o ambiente correto para acessar os secrets

    steps:
      # Checkout do código
      - name: Checkout code
        uses: actions/checkout@v3

      # Criar arquivo de credenciais a partir dos secrets do GitHub
      - name: Create Google Cloud credentials file
        run: |
          echo '${{ secrets.GCP_CREDENTIALS }}' > ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      # Autenticar no Google Cloud
      - name: Authenticate to Google Cloud
        run: |
          gcloud auth activate-service-account --key-file=${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
          gcloud config set project ${{ env.GCP_PROJECT }}

      # Instalar dependências do Python (se necessário)
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install gunicorn  # Instalar Gunicorn

      # Construir a imagem Docker e enviar para o Google Container Registry
      - name: Build and push Docker image
        run: |
          gcloud auth configure-docker
          docker build -t gcr.io/${{ env.GCP_PROJECT }}/${{ env.SERVICE_NAME }} .
          docker push gcr.io/${{ env.GCP_PROJECT }}/${{ env.SERVICE_NAME }}

      # Implantar no Google Cloud Run com portas e volumes corretamente configurados
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.SERVICE_NAME }} \
          --image gcr.io/${{ env.GCP_PROJECT }}/${{ env.SERVICE_NAME }} \
          --region ${{ env.REGION }} \
          --platform managed \
          --memory ${{ env.MEMORY }} \
          --no-allow-unauthenticated \
          --timeout 900 \
          --port 8080 \
          --set-env-vars GOOGLE_APPLICATION_CREDENTIALS=/app/gcp_credentials.json \
          --set-secrets gcp_credentials=${{ secrets.GCP_CREDENTIALS }}:latest \


      # Capturar a URL do serviço implantado
      - name: Get Service URL
        id: get-service-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "Service URL: ${SERVICE_URL}"
          echo "::set-output name=service_url::${SERVICE_URL}"

      # Exibir a URL do serviço para visibilidade
      - name: Output Service URL
        run: echo "Service is available at ${{ steps.get-service-url.outputs.service_url }}"

      # Remover credenciais sensíveis após a execução
      - name: Clean up credentials
        run: rm ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
