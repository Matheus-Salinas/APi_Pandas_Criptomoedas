on:
  push:
    branches:
      - main  # Dispara o pipeline quando houver push na branch main
  workflow_dispatch:  # Permite acionar o pipeline manualmente

env:
  GCP_PROJECT: 'projeto-treinamento-450619'  # ID fixo do projeto
  REGION: 'us-central1'                      # Região onde o serviço será implantado
  FUNCTION_NAME: 'cripto-app'                # Nome do serviço no Cloud Run
  MEMORY: '2Gi'                              # Memória alocada para o serviço
  GOOGLE_APPLICATION_CREDENTIALS: 'gcloud-key.json'  # Caminho para o arquivo de credenciais

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: gcp_autenticador  # Define o ambiente correto para acessar os secrets

    steps:
      # Checkout do repositório
      - name: Checkout code
        uses: actions/checkout@v3

      # Instalar o Google Cloud SDK
      - name: Install Google Cloud SDK
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] http://packages.cloud.google.com/apt cloud-sdk main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install -y google-cloud-sdk

      # Criar arquivo de credenciais a partir da variável de ambiente
      - name: Create Google Cloud credentials file
        run: |
          echo '${{ secrets.GCP_CREDENTIALS }}' > ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      # Autenticar no Google Cloud
      - name: Authenticate to Google Cloud
        run: |
          gcloud auth activate-service-account --key-file=${{ env.GOOGLE_APPLICATION_CREDENTIALS }}
          gcloud config set project ${{ env.GCP_PROJECT }}

      # Instalar dependências do Python (se necessário)
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip setuptools wheel
          pip install -r requirements.txt
          pip install gunicorn  # Instalar Gunicorn

      # Validar configuração do Docker antes de buildar a imagem
      - name: Validate Docker setup
        run: |
          docker --version
          gcloud --version

      # Construir a imagem Docker e enviar para o Google Container Registry
      - name: Build and push Docker image
        run: |
          gcloud auth configure-docker
          docker build -t gcr.io/${{ env.GCP_PROJECT }}/${{ env.FUNCTION_NAME }} .
          docker push gcr.io/${{ env.GCP_PROJECT }}/${{ env.FUNCTION_NAME }}

      # Implantar no Google Cloud Run
      - name: Deploy to Cloud Run
        run: |
          gcloud run deploy ${{ env.FUNCTION_NAME }} \
            --image gcr.io/${{ env.GCP_PROJECT }}/${{ env.FUNCTION_NAME }} \
            --region ${{ env.REGION }} \
            --platform managed \
            --memory ${{ env.MEMORY }} \
            --no-allow-unauthenticated \
            --timeout 900 \
            --set-env-vars GOOGLE_APPLICATION_CREDENTIALS=${{ env.GOOGLE_APPLICATION_CREDENTIALS }}

      # Capturar a URL do serviço implantado
      - name: Get Service URL
        id: get-service-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.FUNCTION_NAME }} --region ${{ env.REGION }} --format='value(status.url)')
          echo "Service URL: ${SERVICE_URL}"
          echo "service_url=${SERVICE_URL}" >> $GITHUB_OUTPUT

      # Exibir a URL do serviço para visibilidade
      - name: Output Service URL
        run: echo "Service is available at ${{ steps.get-service-url.outputs.service_url }}"

      # Remover arquivos sensíveis após a execução para evitar exposição de credenciais
      - name: Clean up credentials
        run: rm ${{ env.GOOGLE_APPLICATION_CREDENTIALS }}